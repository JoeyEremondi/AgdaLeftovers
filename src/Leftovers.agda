{-# OPTIONS --without-K #-}
module Leftovers where

import Level as Level
open import Reflection
open import Reflection.Term
open import Reflection.Pattern as P
open import Category.Monad
open import Reflection.TypeChecking.Monad.Instances

open import Relation.Binary.PropositionalEquality hiding ([_])
open import Relation.Unary using (Decidable)
open import Relation.Nullary


open import Data.Unit
open import Data.Nat as Nat hiding (_‚äì_)
open import Data.Bool
open import Data.Product
open import Data.List as List
open import Data.Char as Char
open import Data.String as String


import Data.List.Categorical
open Data.List.Categorical.TraversableM {m = Level.zero} tcMonad

open import TraverseTerm
open import Data.Maybe using (just ; nothing)

Œªv_‚Ü¶_  Œªh_‚Ü¶_ : String ‚Üí Term ‚Üí Term
Œªv x ‚Ü¶ body  = lam visible (abs x body)
Œªh x ‚Ü¶ body  = lam hidden (abs x body)



constructors : Definition ‚Üí List Name
constructors (data-type pars cs) = cs
constructors _ = []


case_of_ : ‚àÄ {A B : Set} ‚Üí A ‚Üí (A ‚Üí B) ‚Üí B
case x of f = f x

-- Given a name, get its type
-- and generate _ patterns for each argument
-- e.g. turn (a -> b -> c -> d) into [_ , _ , _]
fully-applied-pattern : Name ‚Üí TC (List (Arg Pattern))
fully-applied-pattern nm =
  do
    nmType ‚Üê getType nm
    return (full-app-type nmType)
  where
    full-app-type : Type ‚Üí List (Arg Pattern)
    full-app-type (pi (arg info _) (abs s x)) = arg info (var "_") ‚à∑ full-app-type x
    full-app-type t = []

macro
  by-refls : Name ‚Üí Term ‚Üí TC ‚ä§
  by-refls typeName hole -- thm-you-hope-is-provable-by-refls
    = do
      -- let Œ∑ = nom
      Œ¥ ‚Üê getDefinition typeName
      clauses ‚Üê mapM mk-cls (constructors Œ¥)
      holeType ‚Üê inferType hole
      -- declareDef (vArg Œ∑) holeType
      let retFun = pat-lam clauses []
      unify hole retFun
    where
      mk-cls : Name ‚Üí TC Clause
      mk-cls ctor =
         do
           pat <- fully-applied-pattern ctor
           return (clause [ vArg (con ctor pat) ] (con (quote refl) []))
{- Syntactic sugar for trying a computation, if it fails then try the other one -}
try-fun : ‚àÄ {a} {A : Set a} ‚Üí TC A ‚Üí TC A ‚Üí TC A
try-fun = catchTC

syntax try-fun t f = try t or-else f

‚â°-type-info : Term ‚Üí TC (Arg Term √ó Arg Term √ó Term √ó Term)
‚â°-type-info (def (quote _‚â°_) (ùìÅ ‚à∑ ùíØ ‚à∑ arg _ l ‚à∑ arg _ r ‚à∑ [])) = return (ùìÅ , ùíØ , l , r)
‚â°-type-info _ = typeError [ strErr "Term is not a ‚â°-type." ]

{- If we have ‚Äúf $ args‚Äù return ‚Äúf‚Äù. -}
$-head : Term ‚Üí Term
$-head (var v args) = var v []
$-head (con c args) = con c []
$-head (def f args) = def f []
$-head (pat-lam cs args) = pat-lam cs []
$-head t = t

-- macro
--   apply‚ÇÑ : Term ‚Üí Term ‚Üí TC ‚ä§
--   apply‚ÇÑ p goal =
--     try
--       (do
--         œÑ ‚Üê inferType goal
--         _ , _ , l , r ‚Üê ‚â°-type-info œÑ
--         unify goal ((def (quote cong) (vArg ($-head l) ‚à∑ vArg p ‚à∑ []))))
--     or-else
--       unify goal p


{- Should definitily be in the standard library -}
‚åä_‚åã : ‚àÄ {a} {A : Set a} ‚Üí Dec A ‚Üí Bool
‚åä yes p ‚åã = true
‚åä no ¬¨p ‚åã = false

import Agda.Builtin.Reflection as Builtin

_$-‚âü_ : Term ‚Üí Term ‚Üí Bool
con c args $-‚âü con c‚Ä≤ args‚Ä≤ = Builtin.primQNameEquality c c‚Ä≤
def f args $-‚âü def f‚Ä≤ args‚Ä≤ = Builtin.primQNameEquality f f‚Ä≤
var x args $-‚âü var x‚Ä≤ args‚Ä≤ = ‚åä x Nat.‚âü x‚Ä≤ ‚åã
_ $-‚âü _ = false

{- Only gets heads and as much common args, not anywhere deep. :'( -}
infix 5 _‚äì_
{-# TERMINATING #-} {- Fix this by adding fuel (con c args) ‚âî 1 + length args -}
_‚äì_ : Term ‚Üí Term ‚Üí Term
l ‚äì r with l $-‚âü r | l | r
...| false | x | y = unknown
...| true | var f args | var f‚Ä≤ args‚Ä≤ = var f (List.zipWith (Œª{ (arg i!! t) (arg j!! s) ‚Üí arg i!! (t ‚äì s) }) args args‚Ä≤)
...| true | con f args | con f‚Ä≤ args‚Ä≤ = con f (List.zipWith (Œª{ (arg i!! t) (arg j!! s) ‚Üí arg i!! (t ‚äì s) }) args args‚Ä≤)
...| true | def f args | def f‚Ä≤ args‚Ä≤ = def f (List.zipWith (Œª{ (arg i!! t) (arg j!! s) ‚Üí arg i!! (t ‚äì s) }) args args‚Ä≤)
...| true | ll | _ = ll {- Left biased; using ‚Äòunknown‚Äô does not ensure idempotence. -}

{- ‚Äòunknown‚Äô goes to a variable, a De Bruijn index -}
unknown-elim : ‚Ñï ‚Üí List (Arg Term) ‚Üí List (Arg Term)
unknown-elim n [] = []
unknown-elim n (arg i unknown ‚à∑ xs) = arg i (var n []) ‚à∑ unknown-elim (n + 1) xs
unknown-elim n (arg i (var x args) ‚à∑ xs) = arg i (var (n + suc x) args) ‚à∑ unknown-elim n xs
unknown-elim n (arg i x ‚à∑ xs)       = arg i x ‚à∑ unknown-elim n xs
{- Essentially we want: body(unknown·µ¢)  ‚áí  Œª _ ‚Üí body(var 0)
   However, now all ‚Äúvar 0‚Äù references in ‚Äúbody‚Äù refer to the wrong argument;
   they now refer to ‚Äúone more lambda away than before‚Äù. -}

unknown-count : List (Arg Term) ‚Üí ‚Ñï
unknown-count [] = 0
unknown-count (arg i unknown ‚à∑ xs) = 1 + unknown-count xs
unknown-count (arg i _ ‚à∑ xs) = unknown-count xs

unknown-Œª : ‚Ñï ‚Üí Term ‚Üí Term
unknown-Œª zero body = body
unknown-Œª (suc n) body = unknown-Œª n (Œªv "section" ‚Ü¶ body)

{- Replace ‚Äòunknown‚Äô with sections -}
patch : Term ‚Üí Term
patch it@(def f args) = unknown-Œª (unknown-count args) (def f (unknown-elim 0 args))
patch it@(var f args) = unknown-Œª (unknown-count args) (var f (unknown-elim 0 args))
patch it@(con f args) = unknown-Œª (unknown-count args) (con f (unknown-elim 0 args))
patch t = t


macro
  spine : Term ‚Üí Term ‚Üí TC ‚ä§
  spine p goal =
    do œÑ ‚Üê inferType p
       _ , _ , l , r ‚Üê ‚â°-type-info œÑ
       unify goal (patch (l ‚äì r))

macro
  applyEq : Term ‚Üí Term ‚Üí TC ‚ä§
  applyEq p hole =
    do
       œÑ ‚Üê inferType hole
       _ , _ , l , r ‚Üê ‚â°-type-info œÑ
       unify hole ((def (quote cong) (vArg (patch (l ‚äì r)) ‚à∑ vArg p ‚à∑ [])))

open import Function.Nary.NonDependent
open import Data.Product.Nary.NonDependent



data Holes (n : ‚Ñï) (levels : Levels n) (sets : Sets n levels ) : Set (‚®Ü n levels)    where
  makeHoles : Product n sets ‚Üí Holes n levels sets

getHoles : ‚àÄ {n ls sets} ‚Üí Holes n ls sets ‚Üí Product n sets
getHoles (makeHoles p) = p

nthHole : ‚àÄ n {ls} {as : Sets n ls } k ‚Üí Holes n ls as ‚Üí Proj‚Çô as k
nthHole n k h = proj‚Çô n k (getHoles h)


runPartial : ‚àÄ {‚Ñì} {n} {ls} {types : Sets n ls} {T : Set ‚Ñì} ‚Üí (Holes n ls types ‚Üí T) ‚Üí Product n types ‚Üí T
runPartial f args = f (makeHoles args)

open import Category.Monad.State
import Category.Monad as Monad


-- apply : ‚àÄ {A B : Set} ‚Üí (A ‚Üí B) ‚Üí A ‚Üí B
-- apply f x = f x

-- app : Term ‚Üí Term ‚Üí Term
-- app x y = def (quote apply) (vArg x ‚à∑ vArg y ‚à∑ [])

record MetaInfo : Set where
  field
   foo : ‚Ñï

import Data.Vec as Vec

import Data.Vec.Categorical as VCat

open import Level.Literals using (#_)

quoteLevels : ‚àÄ {n} ‚Üí Vec.Vec Term n ‚Üí TC Term
quoteLevels Vec.[] = return (con (quote Level.lift) (vArg (quoteTerm tt) ‚à∑ []))
quoteLevels {n = suc n} (x Vec.‚à∑ v) = do
  rec ‚Üê quoteLevels {n = n} v
  typeOfType ‚Üê inferType x
  let
    theLevel = case typeOfType of Œª
      { (sort (set l)) ‚Üí  l
      ; (sort (lit l)) ‚Üí  (def (quote #_) (vArg (lit (nat l)) ‚à∑ [] ))
      ;  _ ‚Üí quoteTerm Level.zero }

  return (con (quote _,_) (vArg theLevel ‚à∑ vArg rec ‚à∑ [] ))

quoteSets : ‚àÄ {n} ‚Üí Vec.Vec Term n ‚Üí Term
quoteSets Vec.[] = con (quote Level.lift) (vArg (quoteTerm tt) ‚à∑ [])
quoteSets {n = suc n} (x Vec.‚à∑ v) = (con (quote _,_) (vArg x ‚à∑ vArg (quoteSets v) ‚à∑ [] ))
-- quoteSets {n = suc n} (x Vec.‚à∑ v) = app (app (quoteTerm (_,_   {A = Set} {B = Œª x‚ÇÅ ‚Üí Sets n (proj‚ÇÇ nSet)}  )) x) (quoteSets v)

import Data.Fin.Reflection

record MetaInContext : Set where
  constructor Cmeta
  field
    context : LCxt
    unapplied : Term
    applied : Term

macro
 findUnsolved : (Term ‚Üí TC ‚ä§) ‚Üí Term ‚Üí TC ‚ä§
 findUnsolved theMacro goal =
  do
    -- We're producing a function from hole-fills to the goal type
    funType ‚Üê inferType goal
    -- Unification variable for number of holes, we don't know how many yet
    numHoles ‚Üê newMeta (quoteTerm ‚Ñï)
    -- Unification variables for the HVec of holes
    levels ‚Üê newMeta (def (quote Levels) (vArg numHoles ‚à∑ [])) -- def (quote nSet) [ hArg numHoles ]
    sets ‚Üê newMeta (def (quote Sets) (vArg numHoles ‚à∑ vArg levels ‚à∑ []))
    let productType = def (quote Holes) (vArg numHoles ‚à∑ vArg levels ‚à∑ vArg sets ‚à∑ [])
    -- The return type of the function we're producing
    (argType , goalAbs) ‚Üê case funType of Œª
      { (pi (arg _ dom) cod) ‚Üí return (dom , cod)
      ; _ ‚Üí typeError (strErr "Need to give as argument to applyPartial" ‚à∑ [])}
    unify productType argType
    -- goalType ‚Üê extendContext (vArg productType) (newMeta (quoteTerm Set))
    unify funType (pi (vArg productType) goalAbs)

    -- Run the given macro in the extended context
    funBody <- extendContext (vArg productType) do
      goalType ‚Üê case goalAbs of Œª
        { (abs _ goalType) ‚Üí return goalType }
      body <- newMeta goalType
      theMacro body

      --Now we see what holes are left
      normBody <- normalise body
      debugPrint "Hello" 2 (strErr "MacroBody" ‚à∑ termErr normBody ‚à∑ [])
      let
        handleMetas : _ ‚Üí Meta ‚Üí Data.Maybe.Maybe MetaInContext
        handleMetas ctx m = just (record
          {context = ctx
          ; unapplied = meta m (vArg (var 0 []) ‚à∑ [])
          ; applied = meta m (vArg (var 0 []) ‚à∑ (List.map proj‚ÇÇ ctx))}) -- just (record {context = ctx (meta m (vArg (var 0 []) ‚à∑ [])) ?})
        metas = collectFromSubterms  (record { onVar = Œª _ _ ‚Üí nothing ; onMeta = handleMetas ; onCon = Œª _ _ ‚Üí nothing ; onDef = Œª _ _ ‚Üí nothing }) normBody
        indexedMetas = (Vec.zip (Vec.allFin _) (Vec.fromList metas))

      -- Now we know how many elements are in our Product
      unify (lit (nat (List.length metas))) numHoles

      -- Function to get the ith metavariable from the argument
      -- accessor i as = proj‚Çô (List.length metas) {ls = nSet} {as = as} i
      holeTypes <- VCat.TraversableM.forM {a = Level.zero} {n = List.length metas} tcMonad indexedMetas
        Œª {(i , Cmeta ctx  m mapp) ‚Üí inferType m}
      debugPrint "Hello" 2 (strErr "Got hole types" ‚à∑ List.map termErr (Vec.toList holeTypes))
      let setsFromTypes = quoteSets holeTypes
      debugPrint "Hello" 2 (strErr "Made sets" ‚à∑ termErr setsFromTypes ‚à∑ [])
      levelsFromTypes ‚Üê quoteLevels holeTypes
      debugPrint "Hello" 2 (strErr "Made levels" ‚à∑ termErr levelsFromTypes ‚à∑ [])
      -- Now we know the types of our holes
      unify sets setsFromTypes
      unify levels levelsFromTypes
    -- Replace the ith meta with the ith element of the HList
      forM (Vec.toList indexedMetas) Œª ( i , (Cmeta ctx mt mtApp) ) ‚Üí do
      -- let lhs = (meta mt (List.map proj‚ÇÇ ctx))
        let
          rhs =
            (def (quote nthHole)
              (vArg (lit (nat (List.length metas)))
              -- ‚à∑ hArg (quoteTerm nSet)
              ‚à∑ hArg levels
              ‚à∑ hArg sets
              ‚à∑ vArg (Data.Fin.Reflection.toTerm i)
              ‚à∑ vArg (var 0 [])
              ‚à∑ []))
        debugPrint "Hello" 2 (strErr "Unify RHS" ‚à∑ termErr rhs ‚à∑ [] )
        unify mt rhs
      return body
    --Produce the function that gives the result of the last macro
    unify goal (lam visible (abs "holes" funBody))
    finalResult ‚Üê reduce goal
    debugPrint "Hello" 2 (strErr "Final Result" ‚à∑ termErr finalResult ‚à∑ [])
    return tt



data Foo : Set (Level.suc Level.zero) where
  Bar : Set ‚Üí ‚Ñï ‚Üí ((n : ‚Ñï) ‚Üí n ‚â° n + 0) ‚Üí Foo

makePair : Term ‚Üí TC ‚ä§
makePair = Œª goal ‚Üí
    do
      hole1 <- newMeta (quoteTerm Set)
      hole2 <- newMeta (quoteTerm ‚Ñï)
      hole3 <- newMeta (quoteTerm ((n : ‚Ñï) ‚Üí n ‚â° n + 0))
      body <- extendContext (vArg (quoteTerm ‚Ñï)) do
        tyHole ‚Üê newMeta (quoteTerm Set)
        newHole ‚Üê newMeta tyHole
        return (def (quote sym) (vArg newHole ‚à∑ []))
      unify hole3 (lam visible (abs "arg" body))
      unify hole2 (quoteTerm 4)
      unify goal (con (quote Bar) (vArg hole1 ‚à∑ vArg hole2 ‚à∑ vArg hole3 ‚à∑ []))

p0 : ‚àÄ n ‚Üí n + 0 ‚â° n
p0 zero = refl
p0 (suc n) rewrite p0 n = refl



f : Foo
f = runPartial (findUnsolved makePair) {!!}
